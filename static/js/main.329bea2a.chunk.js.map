{"version":3,"sources":["IMG_1628.jpeg","serviceWorker.js","component/avatar.js","index.js","component/menubtn.js"],"names":["module","exports","Boolean","window","location","hostname","match","useStyles","makeStyles","theme","root","height","width","top","ReactDOM","render","classes","Avatar","alt","src","ren","className","clsx","document","getElementsByClassName","useEffect","$","on","hasClass","removeClass","addClass","class","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kGAAAA,EAAOC,QAAU,IAA0B,uC,gKCYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,4CCbAC,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,KAAM,CACFC,OAAQ,QACRC,MAAO,QACPC,IAAK,Y,0BCHbC,IAASC,OAAO,mBDOD,WACX,IAAMC,EAAUT,IAEhB,OAAQ,kBAACU,EAAA,EAAD,CAAQC,IAAI,WAAWC,IAAKC,IAAKC,UAAWC,YAAKN,EAAQN,KAAM,gBCV3D,MAAYa,SAASC,uBAAuB,oBAAoB,IAChFV,IAASC,OAAO,mBCHD,WAQX,OAPAU,qBAAU,WACNC,IAAE,aAAaC,GAAG,SACd,WACID,IAAE,QAAQE,SAAS,QACfF,IAAE,QAAQG,YAAY,QAAUH,IAAE,QAAQI,SAAS,aAEhE,IACK,uBAAGC,MAAM,YACb,yBAAKA,MAAM,eACX,yBAAKA,MAAM,eACX,yBAAKA,MAAM,kBDRH,MAAaR,SAASS,eAAe,QF0H/C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.329bea2a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/IMG_1628.d6a274c2.jpeg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport ren from '../IMG_1628.jpeg';\nimport { makeStyles } from '@material-ui/core/styles';\nimport clsx from 'clsx';\nconst useStyles = makeStyles(theme => ({\n    root: {\n        height: '100px',\n        width: '100px',\n        top: '25px',\n    },\n}));\n\nexport default function Avatar_ren() {\n    const classes = useStyles();\n\n    return (<Avatar alt='sean ren' src={ren} className={clsx(classes.root, 'centered')}>\n        </Avatar>\n    );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Avatar from './component/avatar'\nimport MenuBtn from './component/menubtn'\nReactDOM.render(<Avatar />, document.getElementsByClassName('component-avatar')[0]);\nReactDOM.render(<MenuBtn />, document.getElementById('btn'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport { useState, useEffect } from \"react\";\nimport './menubtn.css';\nimport $ from 'jquery';\nexport default function MenuBtn() {\n    useEffect(() => {\n        $('.menu-btn').on('click',\n            () => {\n                $('body').hasClass('show')?\n                    $('body').removeClass('show') : $('body').addClass('show')\n                })\n    }, []);\n    return (<a class='menu-btn'>\n        <div class='line line1'></div>\n        <div class='line line2'></div>\n        <div class='line line3'></div>\n    </a>)\n}"],"sourceRoot":""}